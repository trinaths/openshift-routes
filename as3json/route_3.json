{
    "class": "ADC",
    "schemaVersion": "3.10.0",
    "id": "urn:uuid:2d6de5b2-5763-4775-ad93-91ddf4499d4a",
    "label": "Converted Declaration",
    "remark": "Auto-generated by Project Charon",
    "oc_k8s_bigip_ctlr": {
        "class": "Tenant",
        "Shared": {
            "class": "Application",
            "template": "shared",
            "openshift_secure_routes": {
                "rules": [
                    {
                        "name": "openshift_route_myproject_route-3",
                        "conditions": [
                            {
                                "event": "request",
                                "host": {
                                    "values": [
                                        "mysite.f5demo.com"
                                    ],
                                    "operand": "equals"
                                }
                            }
                        ],
                        "actions": [
                            {
                                "event": "request"
                            }
                        ]
                    }
                ],
                "strategy": "first-match",
                "class": "Endpoint_Policy"
            },
            "openshift_myproject_f5_demo_service": {
                "members": [
                    {
                        "addressDiscovery": "static",
                        "servicePort": 8080,
                        "serverAddresses": [
                            "172.17.0.10",
                            "172.17.0.11",
                            "172.17.0.12",
                            "172.17.0.9"
                        ]
                    }
                ],
                "class": "Pool"
            },
            "openshift_passthrough_irule": {
                "class": "iRule",
                "iRule": "    metadata {\n        user_agent {\n            app-service none\n            persist true\n            value k8s-bigip-ctlr-1.9.1-n1591-541111110\n        }\n    }\nproc select_ab_pool {path default_pool } {\n\t\t\tset last_slash [string length $path]\n\t\t\tset ab_class \"/oc-k8s-bigip-ctlr/ab_deployment_dg\"\n\t\t\twhile {$last_slash >= 0} {\n\t\t\t\tif {[class match $path equals $ab_class]} then {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tset last_slash [string last \"/\" $path $last_slash]\n\t\t\t\tincr last_slash -1\n\t\t\t\tset path [string range $path 0 $last_slash]\n\t\t\t}\n\t\t\tif {$last_slash >= 0} {\n\t\t\t\tset ab_rule [class match -value $path equals $ab_class]\n\t\t\t\tif {$ab_rule != \"\"} then {\n\t\t\t\t\tset weight_selection [expr {rand()}]\n\t\t\t\t\tset service_rules [split $ab_rule \";\"]\n\t\t\t\t\tforeach service_rule $service_rules {\n\t\t\t\t\t\tset fields [split $service_rule \",\"]\n\t\t\t\t\t\tset pool_name [lindex $fields 0]\n\t\t\t\t\t\tset weight [expr {double([lindex $fields 1])}]\n\t\t\t\t\t\tif {$weight_selection <= $weight} then {\n\t\t\t\t\t\t\treturn $pool_name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHTTP::respond 503\n\t\t\t}\n\t\t\treturn $default_pool\n\t\t}\n\t\twhen CLIENT_ACCEPTED {\n\t\t\tTCP::collect\n\t\t}\n\t\twhen CLIENT_DATA {\n\t\t\tbinary scan [TCP::payload] cSS tls_content_type tls_version tls_payload_len\n\t\t\tswitch $tls_version {\n\t\t\t\t\"769\" -\n\t\t\t\t\"770\" -\n\t\t\t\t\"771\" {\n\t\t\t\t\tif { $tls_content_type == 22 } {\n\t\t\t\t\t\tbinary scan [TCP::payload] @5c tls_handshake_record_type\n\t\t\t\t\t\tif { $tls_handshake_record_type == 1 } {\n\t\t\t\t\t\t\tset record_offset 43\n\t\t\t\t\t\t\tbinary scan [TCP::payload] @${record_offset}c tls_session_id_len\n\t\t\t\t\t\t\tincr record_offset [expr {1 + $tls_session_id_len}]\n\t\t\t\t\t\t\tbinary scan [TCP::payload] @${record_offset}S tls_cipher_suites_len\n\t\t\t\t\t\t\tincr record_offset [expr {2 + $tls_cipher_suites_len}]\n\t\t\t\t\t\t\tbinary scan [TCP::payload] @${record_offset}c tls_compression_methods_len\n\t\t\t\t\t\t\tincr record_offset [expr {1 + $tls_compression_methods_len}]\n\t\t\t\t\t\t\tbinary scan [TCP::payload] @${record_offset}S tls_extensions_len\n\t\t\t\t\t\t\tincr record_offset 2\n\t\t\t\t\t\t\tbinary scan [TCP::payload] @${record_offset}a* tls_extensions\n\t\t\t\t\t\t\tfor { set extension_start 0 }\n\t\t\t\t\t\t\t\t\t{ $tls_extensions_len - $extension_start == abs($tls_extensions_len - $extension_start) }\n\t\t\t\t\t\t\t\t\t{ incr extension_start 4 } {\n\t\t\t\t\t\t\t\tbinary scan $tls_extensions @${extension_start}SS extension_type extension_len\n\t\t\t\t\t\t\t\tif { $extension_type == \"00\" } {\n\t\t\t\t\t\t\t\t\tset sni_type_offset [expr {$extension_start + 6}]\n\t\t\t\t\t\t\t\t\tbinary scan $tls_extensions @${sni_type_offset}S sni_type\n\t\t\t\t\t\t\t\t\tif { $sni_type == \"0\" } {\n\t\t\t\t\t\t\t\t\t\tset sni_len_offset [expr {$extension_start + 7}]\n\t\t\t\t\t\t\t\t\t\tbinary scan $tls_extensions @${sni_len_offset}S sni_len\n\t\t\t\t\t\t\t\t\t\tset sni_start [expr {$extension_start + 9}]\n\t\t\t\t\t\t\t\t\t\tbinary scan $tls_extensions @${sni_start}A${sni_len} tls_servername\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincr extension_start $extension_len\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif { [info exists tls_servername] } {\n\t\t\t\t\t\t\t\tset servername_lower [string tolower $tls_servername]\n\t\t\t\t\t\t\t\tSSL::disable serverside\n\t\t\t\t\t\t\t\tset dflt_pool \"\"\n\t\t\t\t\t\t\t\tset passthru_class \"/oc-k8s-bigip-ctlr/ssl_passthrough_servername_dg\"\n\t\t\t\t\t\t\t\tset reencrypt_class \"/oc-k8s-bigip-ctlr/ssl_reencrypt_servername_dg\"\n\t\t\t\t\t\t\t\tif { [class exists $passthru_class] } {\n\t\t\t\t\t\t\t\t\tset dflt_pool [class match -value $servername_lower equals $passthru_class]\n\t\t\t\t\t\t\t\t\tif { not ($dflt_pool equals \"\") } {\n\t\t\t\t\t\t\t\t\t\tSSL::disable\n\t\t\t\t\t\t\t\t\t\tHTTP::disable\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telseif { [class exists $reencrypt_class] } {\n\t\t\t\t\t\t\t\t\tset dflt_pool [class match -value $servername_lower equals $reencrypt_class]\n\t\t\t\t\t\t\t\t\tif { not ($dflt_pool equals \"\") } {\n\t\t\t\t\t\t\t\t\t\tSSL::enable serverside\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tset ab_class \"/oc-k8s-bigip-ctlr/ab_deployment_dg\"\n\t\t\t\t\t\t\t\tif { not [class exists $ab_class] } {\n\t\t\t\t\t\t\t\t\tif { $dflt_pool == \"\" } then {\n\t\t\t\t\t\t\t\t\t\tlog local0.debug \"Failed to find pool for $servername_lower\"\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpool $dflt_pool\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tset selected_pool [call select_ab_pool $servername_lower $dflt_pool]\n\t\t\t\t\t\t\t\t\tif { $selected_pool == \"\" } then {\n\t\t\t\t\t\t\t\t\t\tlog local0.debug \"Failed to find pool for $servername_lower\"\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpool $selected_pool\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tTCP::release\n\t\t}\n\t\twhen SERVER_CONNECTED {\n\t\t\tset svrssl_class \"/oc-k8s-bigip-ctlr/ssl_reencrypt_serverssl_dg\"\n\t\t\tif { [info exists servername_lower] and [class exists $svrssl_class] } {\n\t\t\t\tset profile [class match -value $servername_lower equals $svrssl_class]\n\t\t\t\tif { not ($profile equals \"\") } {\n\t\t\t\t\tSSL::profile $profile\n\t\t\t\t}\n\t\t\t}\n\t\t}"
            },
            "https_ose_vserver": {
                "layer4": "tcp",
                "metadata": {
                    "user_agent": {
                        "value": "k8s-bigip-ctlr-1.9.1-n1591-541111110"
                    }
                },
                "source": "0.0.0.0/0",
                "translateServerAddress": true,
                "translateServerPort": true,
                "class": "Service_HTTPS",
                "profileHTTP": {
                    "bigip": "/Common/http"
                },
                "profileTCP": {
                    "bigip": "/Common/tcp"
                },
                "serverTLS": "default_route_clientssl",
                "virtualAddresses": [
                    "172.16.3.8%0"
                ],
                "virtualPort": 443,
                "snat": "auto",
                "policyEndpoint": "/oc-k8s-bigip-ctlr/openshift_secure_routes"
            },
            "ose_vserver": {
                "layer4": "tcp",
                "metadata": {
                    "user_agent": {
                        "value": "k8s-bigip-ctlr-1.9.1-n1591-541111110"
                    }
                },
                "source": "0.0.0.0/0",
                "translateServerAddress": true,
                "translateServerPort": true,
                "class": "Service_HTTP",
                "profileHTTP": {
                    "bigip": "/Common/http"
                },
                "profileTCP": {
                    "bigip": "/Common/tcp"
                },
                "virtualAddresses": [
                    "172.16.3.8%0"
                ],
                "virtualPort": 80,
                "snat": "auto"
            },
            "ssl_reencrypt_servername_dg": {
                "records": [
                    {
                        "key": "mysite.f5demo.com",
                        "value": "openshift_myproject_f5-demo-service"
                    }
                ],
                "keyDataType": "string",
                "class": "Data_Group"
            },
            "ssl_reencrypt_serverssl_dg": {
                "records": [
                    {
                        "key": "mysite.f5demo.com",
                        "value": "/Common/server-ssl"
                    }
                ],
                "keyDataType": "string",
                "class": "Data_Group"
            },
            "certificate_default": {
                "class": "Certificate",
                "certificate": {
                    "bigip": "/Common/default.crt"
                },
                "privateKey": {
                    "bigip": "/Common/default.key"
                }
            },
            "default_route_clientssl": {
                "certificates": [
                    {
                        "certificate": "certificate_default"
                    }
                ],
                "class": "TLS_Server"
            }
        }
    },
    "suren": {
        "class": "Tenant",
        "Shared": {
            "class": "Application",
            "template": "generic",
            "l7_pathbased": {
                "remark": "L7 Path based Route",
                "layer4": "tcp",
                "source": "0.0.0.0/0",
                "translateServerAddress": true,
                "translateServerPort": true,
                "class": "Service_Generic",
                "virtualAddresses": [
                    "10.10.10.10"
                ],
                "virtualPort": 80,
                "snat": "none"
            }
        }
    }
}
